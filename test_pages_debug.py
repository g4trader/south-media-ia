#!/usr/bin/env python3
"""
Teste de Debug das P√°ginas de Usu√°rios e Empresas
"""

import time
import logging
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.options import Options

# Configurar logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

def test_pages_debug():
    """Teste de debug das p√°ginas"""
    try:
        # Configurar driver
        chrome_options = Options()
        chrome_options.add_argument('--headless')
        chrome_options.add_argument('--no-sandbox')
        chrome_options.add_argument('--disable-dev-shm-usage')
        
        driver = webdriver.Chrome(options=chrome_options)
        wait = WebDriverWait(driver, 15)
        
        logging.info("üîç Testando p√°ginas de usu√°rios e empresas...")
        
        # Fazer login primeiro
        driver.get("https://dash.iasouth.tech/login.html")
        time.sleep(3)
        
        username_field = driver.find_element(By.ID, "username")
        password_field = driver.find_element(By.ID, "password")
        login_button = driver.find_element(By.ID, "loginButton")
        
        username_field.send_keys("admin")
        password_field.send_keys("dashboard2025")
        login_button.click()
        time.sleep(5)
        
        # Verificar se est√° logado
        current_url = driver.current_url
        logging.info(f"üîó URL ap√≥s login: {current_url}")
        
        if "dashboard-protected.html" not in current_url:
            logging.error("‚ùå Login falhou")
            return False
        
        # Testar p√°gina de usu√°rios
        logging.info("üß™ Testando p√°gina de usu√°rios...")
        driver.get("https://dash.iasouth.tech/users.html")
        time.sleep(5)
        
        current_url = driver.current_url
        logging.info(f"üîó URL da p√°gina de usu√°rios: {current_url}")
        
        if "login.html" in current_url:
            logging.error("‚ùå P√°gina de usu√°rios redirecionou para login")
            return False
        
        # Verificar elementos da p√°gina de usu√°rios
        try:
            novo_usuario_btn = driver.find_element(By.ID, "novoUsuarioBtn")
            logging.info("‚úÖ Bot√£o novo usu√°rio encontrado")
        except Exception as e:
            logging.error(f"‚ùå Bot√£o novo usu√°rio n√£o encontrado: {e}")
            return False
        
        # Testar p√°gina de empresas
        logging.info("üß™ Testando p√°gina de empresas...")
        driver.get("https://dash.iasouth.tech/companies.html")
        time.sleep(5)
        
        current_url = driver.current_url
        logging.info(f"üîó URL da p√°gina de empresas: {current_url}")
        
        if "login.html" in current_url:
            logging.error("‚ùå P√°gina de empresas redirecionou para login")
            return False
        
        # Verificar elementos da p√°gina de empresas
        try:
            nova_empresa_btn = driver.find_element(By.ID, "novaEmpresaBtn")
            logging.info("‚úÖ Bot√£o nova empresa encontrado")
        except Exception as e:
            logging.error(f"‚ùå Bot√£o nova empresa n√£o encontrado: {e}")
            return False
        
        logging.info("‚úÖ Ambas as p√°ginas funcionando corretamente")
        return True
        
    except Exception as e:
        logging.error(f"‚ùå Erro geral: {e}")
        return False
    
    finally:
        driver.quit()

if __name__ == "__main__":
    success = test_pages_debug()
    if success:
        logging.info("üéâ Teste das p√°ginas passou!")
    else:
        logging.error("‚ùå Teste das p√°ginas falhou!")
