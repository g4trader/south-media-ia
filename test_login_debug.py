#!/usr/bin/env python3
"""
Teste de Debug do Sistema de Login
"""

import time
import logging
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.options import Options

# Configurar logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

def test_login_debug():
    """Teste de debug do login"""
    try:
        # Configurar driver
        chrome_options = Options()
        chrome_options.add_argument('--headless')
        chrome_options.add_argument('--no-sandbox')
        chrome_options.add_argument('--disable-dev-shm-usage')
        
        driver = webdriver.Chrome(options=chrome_options)
        wait = WebDriverWait(driver, 10)
        
        logging.info("üîç Testando p√°gina de login...")
        
        # Acessar p√°gina de login
        driver.get("https://dash.iasouth.tech/login.html")
        time.sleep(3)
        
        # Verificar t√≠tulo da p√°gina
        title = driver.title
        logging.info(f"üìÑ T√≠tulo da p√°gina: {title}")
        
        # Verificar se a p√°gina carregou
        body = driver.find_element(By.TAG_NAME, "body")
        logging.info(f"üìù Conte√∫do do body: {body.text[:200]}...")
        
        # Verificar elementos espec√≠ficos
        try:
            username_field = driver.find_element(By.ID, "username")
            logging.info("‚úÖ Campo username encontrado")
        except Exception as e:
            logging.error(f"‚ùå Campo username n√£o encontrado: {e}")
        
        try:
            password_field = driver.find_element(By.ID, "password")
            logging.info("‚úÖ Campo password encontrado")
        except Exception as e:
            logging.error(f"‚ùå Campo password n√£o encontrado: {e}")
        
        try:
            login_button = driver.find_element(By.ID, "loginButton")
            logging.info("‚úÖ Bot√£o login encontrado")
        except Exception as e:
            logging.error(f"‚ùå Bot√£o login n√£o encontrado: {e}")
        
        # Verificar se h√° erros JavaScript
        logs = driver.get_log('browser')
        for log in logs:
            if log['level'] == 'SEVERE':
                logging.error(f"üö® Erro JavaScript: {log['message']}")
        
        # Tentar fazer login
        try:
            username_field = driver.find_element(By.ID, "username")
            password_field = driver.find_element(By.ID, "password")
            login_button = driver.find_element(By.ID, "loginButton")
            
            username_field.send_keys("admin")
            password_field.send_keys("admin123")
            login_button.click()
            
            time.sleep(3)
            
            current_url = driver.current_url
            logging.info(f"üîó URL ap√≥s login: {current_url}")
            
            if "dashboard-protected.html" in current_url:
                logging.info("‚úÖ Login bem-sucedido!")
            else:
                logging.info("‚ùå Login falhou - n√£o redirecionou")
                
        except Exception as e:
            logging.error(f"‚ùå Erro durante login: {e}")
        
        driver.quit()
        
    except Exception as e:
        logging.error(f"‚ùå Erro geral: {e}")

if __name__ == "__main__":
    test_login_debug()
