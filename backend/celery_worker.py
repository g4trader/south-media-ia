#!/usr/bin/env python3
"""
Worker do Celery para South Media IA
Gerencia importa√ß√µes autom√°ticas de campanhas e agendamento de tarefas
"""

import os
import sys
import logging
from pathlib import Path

# Adicionar o diret√≥rio src ao path
src_path = Path(__file__).parent / "src"
sys.path.insert(0, str(src_path))

from src.services.scheduler_service import celery_app, start_celery_worker, stop_celery_worker

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def main():
    """Fun√ß√£o principal para iniciar o worker do Celery"""
    try:
        logger.info("üöÄ Iniciando Worker do Celery para South Media IA...")
        
        # Verificar vari√°veis de ambiente
        redis_url = os.getenv("REDIS_URL", "redis://localhost:6379")
        logger.info(f"üì° Conectando ao Redis: {redis_url}")
        
        # Iniciar worker
        start_celery_worker()
        
        logger.info("‚úÖ Worker do Celery iniciado com sucesso!")
        logger.info("üìã Tarefas agendadas:")
        logger.info("   - Importa√ß√£o di√°ria: 6h da manh√£")
        logger.info("   - Importa√ß√£o semanal: Domingo √†s 2h da manh√£")
        logger.info("   - Importa√ß√£o mensal: Primeiro dia do m√™s √†s 3h da manh√£")
        
        # Manter o worker rodando
        try:
            while True:
                import time
                time.sleep(60)  # Verificar a cada minuto
        except KeyboardInterrupt:
            logger.info("üõë Recebido sinal de interrup√ß√£o...")
            stop_celery_worker()
            logger.info("‚úÖ Worker do Celery encerrado com sucesso!")
            
    except Exception as e:
        logger.error(f"‚ùå Erro ao iniciar worker do Celery: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()

