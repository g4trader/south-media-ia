#!/usr/bin/env python3
"""
Teste final com Selenium no dashboard funcionando
"""

import time
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

def final_selenium_test():
    """Teste final do dashboard funcionando"""
    print("üöÄ Executando teste final com Selenium...")
    
    chrome_options = Options()
    chrome_options.add_argument("--headless")
    chrome_options.add_argument("--no-sandbox")
    chrome_options.add_argument("--disable-dev-shm-usage")
    chrome_options.add_argument("--window-size=1920,1080")
    
    driver = webdriver.Chrome(options=chrome_options)
    wait = WebDriverWait(driver, 15)  # Aguardar mais tempo
    
    try:
        url = "http://localhost:5001/static/dash_teste_selenium_final.html"
        print(f"üåê Acessando: {url}")
        
        driver.get(url)
        
        # Aguardar carregamento completo
        print("‚è≥ Aguardando carregamento...")
        time.sleep(5)
        
        # Verificar elementos b√°sicos
        checks = [
            ("T√≠tulo da p√°gina", lambda: "Dashboard" in driver.title),
            ("Container principal", lambda: len(driver.find_elements(By.CSS_SELECTOR, ".container")) > 0),
            ("Logo South Media", lambda: len(driver.find_elements(By.XPATH, "//div[contains(text(), 'South Media')]")) > 0),
            ("Navega√ß√£o por tabs", lambda: len(driver.find_elements(By.CSS_SELECTOR, ".tab")) == 4),
            ("M√©tricas carregadas", lambda: len(driver.find_elements(By.CSS_SELECTOR, ".metric")) > 0),
            ("Gr√°ficos renderizados", lambda: len(driver.find_elements(By.TAG_NAME, "canvas")) > 0),
            ("Tabelas presentes", lambda: len(driver.find_elements(By.TAG_NAME, "table")) > 0)
        ]
        
        print("\nüìä Executando verifica√ß√µes:")
        passed = 0
        total = len(checks)
        
        for name, check_func in checks:
            try:
                result = check_func()
                status = "‚úÖ" if result else "‚ùå"
                print(f"  {status} {name}: {'OK' if result else 'FALHOU'}")
                if result:
                    passed += 1
            except Exception as e:
                print(f"  ‚ùå {name}: ERRO - {e}")
        
        # Verificar se dados foram carregados
        print("\nüîç Verificando carregamento de dados...")
        try:
            # Aguardar m√©tricas aparecerem
            metrics = wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, ".metric")))
            if metrics:
                print("  ‚úÖ M√©tricas carregadas com sucesso")
                passed += 1
                total += 1
        except:
            print("  ‚ùå M√©tricas n√£o carregadas")
            total += 1
        
        # Verificar navega√ß√£o por tabs
        print("\nüìã Testando navega√ß√£o por tabs...")
        try:
            tabs = driver.find_elements(By.CSS_SELECTOR, ".tab")
            if len(tabs) >= 4:
                # Testar clique em cada tab
                for i, tab in enumerate(tabs):
                    tab.click()
                    time.sleep(1)
                    print(f"  ‚úÖ Tab {i+1} clic√°vel")
                    passed += 1
                    total += 1
            else:
                print("  ‚ùå N√∫mero insuficiente de tabs")
                total += 1
        except Exception as e:
            print(f"  ‚ùå Erro na navega√ß√£o: {e}")
            total += 1
        
        # Calcular taxa de sucesso
        success_rate = (passed / total) * 100
        
        print(f"\nüìà RESULTADO FINAL:")
        print(f"  ‚úÖ Testes aprovados: {passed}")
        print(f"  ‚ùå Testes falharam: {total - passed}")
        print(f"  üìä Taxa de sucesso: {success_rate:.1f}%")
        
        if success_rate >= 90:
            print("\nüéâ TEMPLATE GEN√âRICO APROVADO COM SELENIUM!")
            print("   ‚úÖ Design South Media funcionando")
            print("   ‚úÖ Dados reais carregados")
            print("   ‚úÖ Navega√ß√£o por tabs funcionando")
            print("   ‚úÖ Gr√°ficos e m√©tricas renderizados")
        elif success_rate >= 70:
            print("\n‚ö†Ô∏è TEMPLATE COM PEQUENOS PROBLEMAS")
        else:
            print("\n‚ùå TEMPLATE PRECISA DE CORRE√á√ïES")
            
        return success_rate >= 90
        
    except Exception as e:
        print(f"‚ùå Erro geral no teste: {e}")
        return False
    finally:
        driver.quit()

if __name__ == "__main__":
    final_selenium_test()

