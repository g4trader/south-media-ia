#!/usr/bin/env python3
"""
Teste completo do sistema Vercel com login real
"""

import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.support.ui import Select
from selenium.webdriver.common.keys import Keys
from selenium.common.exceptions import TimeoutException, NoSuchElementException
from selenium.webdriver.chrome.options import Options

def setup_driver():
    """Configurar o driver do Chrome"""
    chrome_options = Options()
    chrome_options.add_argument("--no-sandbox")
    chrome_options.add_argument("--disable-dev-shm-usage")
    chrome_options.add_argument("--disable-gpu")
    chrome_options.add_argument("--window-size=1920,1080")
    chrome_options.add_argument("--user-agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36")
    
    driver = webdriver.Chrome(options=chrome_options)
    driver.implicitly_wait(10)
    return driver

def test_login(driver):
    """Testar o sistema de login com credenciais reais"""
    print("üîê Testando login com credenciais de demonstra√ß√£o...")
    
    try:
        # Acessar p√°gina de login
        driver.get("https://dash.iasouth.tech/login.html")
        time.sleep(3)
        
        # Verificar se a p√°gina carregou
        if "Login" in driver.title or "Acesso Restrito" in driver.page_source:
            print("‚úÖ P√°gina de login carregada")
        else:
            print("‚ùå P√°gina de login n√£o carregou corretamente")
            return False
        
        # Preencher credenciais de admin
        try:
            username_field = WebDriverWait(driver, 10).until(
                EC.presence_of_element_located((By.ID, "username"))
            )
            password_field = driver.find_element(By.ID, "password")
            
            # Usar credenciais de admin
            username_field.clear()
            username_field.send_keys("admin")
            
            password_field.clear()
            password_field.send_keys("dashboard2025")
            
            print("‚úÖ Credenciais preenchidas")
            
            # Clicar no bot√£o de login
            login_button = driver.find_element(By.ID, "loginButton")
            login_button.click()
            
            print("‚úÖ Bot√£o de login clicado")
            
            # Aguardar redirecionamento
            time.sleep(5)
            
            # Verificar se logou com sucesso
            current_url = driver.current_url
            print(f"üìä URL ap√≥s login: {current_url}")
            
            if "dashboard-protected" in current_url or "dashboard-builder" in current_url:
                print("‚úÖ Login realizado com sucesso")
                return True
            elif "login" in current_url:
                # Verificar se h√° mensagem de erro
                try:
                    error_element = driver.find_element(By.ID, "errorMessage")
                    if error_element.is_displayed():
                        print(f"‚ùå Erro de login: {error_element.text}")
                    else:
                        print("‚ùå Login falhou sem mensagem de erro vis√≠vel")
                except:
                    print("‚ùå Login falhou")
                return False
            else:
                print("‚úÖ Login realizado com sucesso (redirecionamento para p√°gina diferente)")
                return True
                
        except TimeoutException:
            print("‚ùå Campos de login n√£o encontrados")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro no login: {e}")
        return False

def test_dashboard_creation(driver):
    """Testar cria√ß√£o de dashboard com dados reais"""
    print("üìä Testando cria√ß√£o de dashboard...")
    
    try:
        # Acessar p√°gina de cria√ß√£o de dashboard
        driver.get("https://dash.iasouth.tech/dashboard-builder.html")
        time.sleep(5)
        
        # Verificar se a p√°gina carregou
        current_url = driver.current_url
        print(f"üìä URL atual: {current_url}")
        
        if "dashboard-builder" in current_url:
            print("‚úÖ P√°gina de cria√ß√£o carregada")
        else:
            print("‚ùå P√°gina de cria√ß√£o n√£o carregou ou foi redirecionada")
            return False
        
        # Clicar no bot√£o "Criar Novo Dashboard" para abrir o modal
        print("üîò Clicando no bot√£o 'Criar Novo Dashboard'...")
        try:
            create_button = WebDriverWait(driver, 10).until(
                EC.element_to_be_clickable((By.CLASS_NAME, "create-dashboard-btn"))
            )
            create_button.click()
            print("‚úÖ Modal de cria√ß√£o aberto")
            time.sleep(2)  # Aguardar modal abrir
        except Exception as e:
            print(f"‚ùå Erro ao clicar no bot√£o criar: {e}")
            return False
        
        # Dados da campanha SEBRAE
        campaign_data = {
            "nome": "SEBRAE INSTITUCIONAL SETEMBRO",
            "data_inicio": "15/09/2025",
            "data_fim": "30/09/2025",
            "verba_total": "31000",
            "kpi_valor": "0.16",
            "kpi_meta": "193750",
            "sheet_id": "1IUUSXaN0Drrdt-7B0IUiMRQK2gT-JtzhCFZvV7e5-V8",
            "gid": "668487440",
            "estrategias": """Segmenta√ß√µes
DoubleVerify - DV: VIDEO Fraud & Invalid Traffic>Fraud & IVT by Site/App>Safe from Fraudulent or No Ads Sites/Apps (100% Invalid Traffic) (13963543)
and
TailTarget > BRAZIL > Microsegment > Micro entrepreneurs (EN), Microempresarios (ES), Microempreendedores (PT) (28763396)
and
TailTarget > GLOBAL > Mosaic Business (PT) > Mosaic Business - D25 - Jovens Empreendedores Em Ascensao by Serasa Experian (PT) (24381927)
and
TailTarget > GLOBAL > Jobs (EN) > Perfil Autonomo e Empreendedor by Vagas (PT) (24381449)""",
            "publishers": """Gazeta do Povo	gazetadopovo.com.br
Bem Paran√°	bemparana.com.br
Tribuna PR	tribunapr.com.br
Bonde	bonde.com.br
Massa News	massanews.com
Paran√° Portal	paranaportal.com
Plural Curitiba	plural.jor.br
O Paran√°	oparana.com.br
AEN-PR	aen.pr.gov.br
IPARDES	ipardes.pr.gov.br
Revista PEGN	revistapegn.globo.com
Exame	exame.com
InfoMoney	infomoney.com.br
Monitor do Mercado	monitordomercado.com.br
Forbes Brasil	forbes.com.br
Endeavor Brasil	endeavor.org.br
Neg√≥cios Brasil	negociosbrasil.com.br
MeuBiz	meubiz.com.br
Quero um Neg√≥cio	queroumnegocio.com.br
Sonoticiaboa	sonoticiaboa.com.br
CNN Brasil Economia	cnnbrasil.com.br/economia
R7 Economia	r7.com/economia
Estad√£o Economia	estadao.com.br/
Folha Mercado	folha.uol.com.br/
O Globo Economia	oglobo.globo.com/
UOL Economia	economia.uol.com.br
Terra Economia	terra.com.br/
Valor Econ√¥mico	valor.globo.com
Bloomberg L√≠nea	bloomberglinea.com.br
InvestNews	investnews.com.br
Investing Brasil	br.investing.com
Not√≠cias Agr√≠colas	noticiasagricolas.com.br
Canal Rural	canalrural.com.br
Compre Rural	comprerural.com
Agro em Dia	agroemdia.com.br
Agro Link	agrolink.com.br
Proteste	proteste.org.br
Reclame Aqui	reclameaqui.com.br
MarketUp	marketup.com
Econodata	econodata.com.br
Casa dos Dados	casadosdados.com.br
FDR	fdr.com.br
CNPJ.biz	cnpj.biz
Serasa Experian	serasaexperian.com.br
Correio Braziliense (Economia)	correiobraziliense.com.br/
Jovem Pan Economia	jovempan.com.br/
Veja SP Economia	vejasp.abril.com.br/
Revista Isto√â Dinheiro	istoedinheiro.com.br
Revista √âpoca Neg√≥cios	epocanegocios.globo.com
Carta Capital Economia	cartacapital.com.br/
Revista Oeste Economia	revistaoeste.com/
O Antagonista Economia	oantagonista.com.br/
Metropoles Economia	metropoles.com/
Di√°rio do Com√©rcio	dcomercio.com.br
DCI - Di√°rio Com√©rcio Ind√∫stria	dci.com.br
IPEA	ipea.gov.br
SEBRAE Portal	sebrae.com.br
Not√≠cias Cascavel (Economia)	noticiascascavel.com.br
CBN Ponta Grossa (Economia)	cbnpg.com.br/
Jornal Ponta Grossa	jornalpontagrossa.com.br
BNT Online	bntonline.com.br
Bem Paran√° ‚Äì Economia	bemparana.com.br
Central Sul de Not√≠cias	centralsuldenoticias.com.br"""
        }
        
        # Preencher dados da campanha
        print("üìù Preenchendo dados da campanha...")
        
        # Nome da campanha
        try:
            nome_field = WebDriverWait(driver, 10).until(
                EC.presence_of_element_located((By.ID, "campaignName"))
            )
            nome_field.clear()
            nome_field.send_keys(campaign_data["nome"])
            print("‚úÖ Nome da campanha preenchido")
        except:
            print("‚ùå Campo nome da campanha n√£o encontrado")
        
        # Data de in√≠cio
        try:
            data_inicio = driver.find_element(By.ID, "startDate")
            data_inicio.clear()
            data_inicio.send_keys(campaign_data["data_inicio"])
            print("‚úÖ Data de in√≠cio preenchida")
        except:
            print("‚ùå Campo data de in√≠cio n√£o encontrado")
        
        # Data de fim
        try:
            data_fim = driver.find_element(By.ID, "endDate")
            data_fim.clear()
            data_fim.send_keys(campaign_data["data_fim"])
            print("‚úÖ Data de fim preenchida")
        except:
            print("‚ùå Campo data de fim n√£o encontrado")
        
        # Verba total
        try:
            verba_field = driver.find_element(By.ID, "totalBudget")
            verba_field.clear()
            verba_field.send_keys(campaign_data["verba_total"])
            print("‚úÖ Verba total preenchida")
        except:
            print("‚ùå Campo verba total n√£o encontrado")
        
        # Valor do KPI
        try:
            kpi_valor = driver.find_element(By.ID, "kpiValue")
            kpi_valor.clear()
            kpi_valor.send_keys(campaign_data["kpi_valor"])
            print("‚úÖ Valor do KPI preenchido")
        except:
            print("‚ùå Campo valor do KPI n√£o encontrado")
        
        # Meta do KPI
        try:
            kpi_meta = driver.find_element(By.ID, "kpiTarget")
            kpi_meta.clear()
            kpi_meta.send_keys(campaign_data["kpi_meta"])
            print("‚úÖ Meta do KPI preenchida")
        except:
            print("‚ùå Campo meta do KPI n√£o encontrado")
        
        # Estrat√©gias
        try:
            estrategias_field = driver.find_element(By.ID, "campaignStrategies")
            estrategias_field.clear()
            estrategias_field.send_keys(campaign_data["estrategias"])
            print("‚úÖ Estrat√©gias preenchidas")
        except:
            print("‚ùå Campo estrat√©gias n√£o encontrado")
        
        # Configurar canal Program√°tica Display
        print("üì∫ Configurando canal Program√°tica Display...")
        
        try:
            # Marcar checkbox do Program√°tica Display
            programatica_checkbox = driver.find_element(By.ID, "channel_programmatic_display")
            if not programatica_checkbox.is_selected():
                programatica_checkbox.click()
            print("‚úÖ Checkbox Program√°tica Display marcado")
            
            # Preencher ID da planilha
            sheet_id_field = driver.find_element(By.ID, "programmatic_display_sheet")
            sheet_id_field.clear()
            sheet_id_field.send_keys(campaign_data["sheet_id"])
            print("‚úÖ ID da planilha preenchido")
            
            # Preencher GID
            gid_field = driver.find_element(By.ID, "programmatic_display_gid")
            gid_field.clear()
            gid_field.send_keys(campaign_data["gid"])
            print("‚úÖ GID preenchido")
            
            # Preencher or√ßamento
            budget_field = driver.find_element(By.ID, "programmatic_display_budget")
            budget_field.clear()
            budget_field.send_keys(campaign_data["verba_total"])
            print("‚úÖ Or√ßamento preenchido")
            
            # Preencher quantidade
            quantity_field = driver.find_element(By.ID, "programmatic_display_quantity")
            quantity_field.clear()
            quantity_field.send_keys(campaign_data["kpi_meta"])
            print("‚úÖ Quantidade preenchida")
            
        except Exception as e:
            print(f"‚ùå Erro ao configurar canal: {e}")
        
        time.sleep(3)
        
        # Clicar em Salvar Dashboard
        print("üíæ Salvando dashboard...")
        try:
            save_button = WebDriverWait(driver, 10).until(
                EC.element_to_be_clickable((By.ID, "saveDashboardBtn"))
            )
            save_button.click()
            print("‚úÖ Bot√£o salvar clicado")
            
            # Aguardar resposta
            time.sleep(15)
            
            # Verificar se houve sucesso
            try:
                # Verificar se h√° mensagem de sucesso
                success_message = WebDriverWait(driver, 10).until(
                    EC.presence_of_element_located((By.XPATH, "//div[contains(@class, 'success') or contains(text(), 'sucesso') or contains(text(), 'criado') or contains(text(), 'Dashboard')]"))
                )
                print("‚úÖ Dashboard criado com sucesso!")
                print(f"üìÑ Mensagem: {success_message.text}")
                return True
                
            except TimeoutException:
                # Verificar se h√° mensagem de erro
                try:
                    error_message = driver.find_element(By.XPATH, "//div[contains(@class, 'error') or contains(@class, 'alert') or contains(@class, 'danger')]")
                    if error_message.is_displayed():
                        print(f"‚ùå Erro ao criar dashboard: {error_message.text}")
                        return False
                except:
                    pass
                
                # Verificar se houve redirecionamento
                current_url = driver.current_url
                print(f"üìä URL atual: {current_url}")
                
                # Verificar se o modal foi fechado (indicando sucesso)
                try:
                    modal = driver.find_element(By.ID, "createDashboardModal")
                    if not modal.is_displayed():
                        print("‚úÖ Modal fechado - Dashboard provavelmente criado com sucesso!")
                        return True
                except:
                    pass
                
                # Verificar se h√° elementos de sucesso na p√°gina
                try:
                    success_elements = driver.find_elements(By.XPATH, "//*[contains(text(), 'sucesso') or contains(text(), 'criado') or contains(text(), 'Dashboard')]")
                    if success_elements:
                        print("‚úÖ Elementos de sucesso encontrados na p√°gina")
                        return True
                except:
                    pass
                
                print("‚ùå N√£o foi poss√≠vel determinar o resultado")
                return False
                
        except Exception as e:
            print(f"‚ùå Erro ao clicar em salvar: {e}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro geral na cria√ß√£o do dashboard: {e}")
        return False

def test_dashboard_listing(driver):
    """Testar listagem de dashboards"""
    print("üìã Testando listagem de dashboards...")
    
    try:
        driver.get("https://dash.iasouth.tech/dashboard-protected.html")
        time.sleep(5)
        
        # Verificar se h√° dashboards listados
        try:
            dashboard_cards = driver.find_elements(By.XPATH, "//div[contains(@class, 'dashboard-card') or contains(@class, 'card')]")
            if dashboard_cards:
                print(f"‚úÖ {len(dashboard_cards)} dashboards encontrados")
                return True
            else:
                print("‚ùå Nenhum dashboard encontrado")
                return False
        except:
            print("‚ùå Erro ao verificar dashboards")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro na listagem: {e}")
        return False

def main():
    """Fun√ß√£o principal do teste"""
    print("üöÄ Iniciando teste completo do sistema Vercel com login real")
    print("=" * 70)
    
    driver = None
    try:
        # Configurar driver
        driver = setup_driver()
        
        # Teste 1: Login
        login_success = test_login(driver)
        
        if not login_success:
            print("‚ùå Login falhou, n√£o √© poss√≠vel continuar com os testes")
            return
        
        # Teste 2: Cria√ß√£o de dashboard
        dashboard_success = test_dashboard_creation(driver)
        
        # Teste 3: Listagem de dashboards
        listing_success = test_dashboard_listing(driver)
        
        # Resultado final
        print("\n" + "=" * 70)
        print("üìä RESULTADO DOS TESTES:")
        print(f"üîê Login: {'‚úÖ Sucesso' if login_success else '‚ùå Falhou'}")
        print(f"üìä Cria√ß√£o Dashboard: {'‚úÖ Sucesso' if dashboard_success else '‚ùå Falhou'}")
        print(f"üìã Listagem Dashboards: {'‚úÖ Sucesso' if listing_success else '‚ùå Falhou'}")
        
        if dashboard_success:
            print("\nüéâ TESTE CONCLU√çDO COM SUCESSO!")
            print("‚úÖ O sistema est√° funcionando corretamente")
            print("‚úÖ Dashboard SEBRAE INSTITUCIONAL SETEMBRO foi criado com sucesso!")
        else:
            print("\n‚ö†Ô∏è TESTE FALHOU")
            print("‚ùå H√° problemas que precisam ser corrigidos")
        
    except Exception as e:
        print(f"‚ùå Erro cr√≠tico: {e}")
    
    finally:
        if driver:
            print("\nüîÑ Fechando navegador...")
            driver.quit()

if __name__ == "__main__":
    main()
