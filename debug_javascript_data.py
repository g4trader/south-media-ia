#!/usr/bin/env python3
"""
Debug espec√≠fico para verificar os dados JavaScript
"""

import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.options import Options
from selenium.common.exceptions import TimeoutException, NoSuchElementException

def debug_javascript_data():
    """Debug espec√≠fico dos dados JavaScript"""
    print("üîç DEBUG DOS DADOS JAVASCRIPT")
    print("=" * 50)
    
    # Setup
    chrome_options = Options()
    chrome_options.add_argument("--headless")
    chrome_options.add_argument("--no-sandbox")
    chrome_options.add_argument("--disable-dev-shm-usage")
    chrome_options.add_argument("--window-size=1920,1080")
    
    try:
        driver = webdriver.Chrome(options=chrome_options)
        wait = WebDriverWait(driver, 20)
        
        print("üìä Acessando dashboard...")
        driver.get("http://localhost:5000/static/dash_sebrae_programatica_video_sync.html")
        time.sleep(10)  # Aguardar carregamento
        
        # Verificar dados JavaScript
        print("\nüîß Verificando dados JavaScript...")
        
        try:
            # Verificar se os dados est√£o carregados
            data_available = driver.execute_script("return window.dashboardLoader.data !== null")
            print(f"‚úÖ Dados carregados: {data_available}")
            
            if data_available:
                # Verificar estrutura dos dados
                data_keys = driver.execute_script("return Object.keys(window.dashboardLoader.data)")
                print(f"üìã Chaves dos dados: {data_keys}")
                
                # Verificar cada se√ß√£o individualmente
                for key in ['metrics', 'contract', 'strategies', 'publishers', 'daily_data', 'per_data']:
                    try:
                        value = driver.execute_script(f"return window.dashboardLoader.data.{key}")
                        if value:
                            if key == 'publishers' and isinstance(value, list):
                                print(f"‚úÖ {key}: {len(value)} itens")
                                for i, item in enumerate(value):
                                    print(f"   {i+1}. {item}")
                            elif key == 'strategies' and isinstance(value, dict):
                                print(f"‚úÖ {key}: {list(value.keys())}")
                                for subkey, subvalue in value.items():
                                    print(f"   {subkey}: {subvalue}")
                            elif key == 'contract' and isinstance(value, dict):
                                print(f"‚úÖ {key}: {list(value.keys())}")
                                for subkey, subvalue in value.items():
                                    print(f"   {subkey}: {subvalue}")
                            else:
                                print(f"‚úÖ {key}: {type(value)}")
                        else:
                            print(f"‚ùå {key}: null ou undefined")
                    except Exception as e:
                        print(f"‚ùå Erro ao verificar {key}: {e}")
                
                # Verificar se renderPlanningData foi chamada
                print("\nüîß Verificando se renderPlanningData foi chamada...")
                
                # Navegar para aba de planejamento
                planning_tab = driver.find_element(By.CSS_SELECTOR, '.tab[data-tab="planning"]')
                driver.execute_script("arguments[0].click();", planning_tab)
                time.sleep(2)
                
                # Verificar publishers
                publishers_divs = driver.find_elements(By.CSS_SELECTOR, '#tab-planning .card:nth-child(3) div[style*="grid-template-columns"] > div')
                print(f"üì∫ Publishers divs encontrados: {len(publishers_divs)}")
                
                if len(publishers_divs) >= 6:
                    print("‚úÖ Lista de publishers carregada corretamente")
                    
                    # Verificar se s√£o dados din√¢micos
                    for i, div in enumerate(publishers_divs[:3]):
                        try:
                            div_text = div.text
                            print(f"   {i+1}. {div_text}")
                            
                            # Verificar se √© HTML din√¢mico
                            div_html = driver.execute_script("return arguments[0].outerHTML", div)
                            if "border-left:4px solid #ff6b35" in div_html:
                                print(f"      ‚úÖ Div {i+1} √© din√¢mico")
                            else:
                                print(f"      ‚ö†Ô∏è Div {i+1} √© est√°tico")
                                
                        except Exception as e:
                            print(f"   ‚ùå Erro ao verificar div {i+1}: {e}")
                else:
                    print("‚ùå Lista de publishers incompleta")
                    
            else:
                print("‚ùå Dados n√£o est√£o carregados")
                
        except Exception as e:
            print(f"‚ùå Erro ao verificar dados JavaScript: {e}")
        
        # Screenshot
        driver.save_screenshot("selenium_debug_javascript_data.png")
        print("\nüì∏ Screenshot salvo: selenium_debug_javascript_data.png")
        
        print("\n‚úÖ Debug conclu√≠do!")
        
    except Exception as e:
        print(f"‚ùå Erro durante o debug: {e}")
    
    finally:
        if 'driver' in locals():
            driver.quit()
            print("üîß Driver finalizado")

if __name__ == "__main__":
    debug_javascript_data()
