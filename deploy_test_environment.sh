#!/bin/bash

# Script para deploy em ambiente de teste
# Cria um ambiente separado para testar a corre√ß√£o de datas

set -e

echo "üöÄ DEPLOY EM AMBIENTE DE TESTE - CORRE√á√ÉO DE DATAS"
echo "=================================================="

# Configura√ß√µes do ambiente de teste
PROJECT_ID=${PROJECT_ID:-"automatizar-452311"}
SERVICE_NAME="dashboard-builder-test"
REGION="us-central1"
IMAGE_NAME="gcr.io/$PROJECT_ID/$SERVICE_NAME"
BUILD_ID=$(date +%Y%m%d-%H%M%S)

echo "üìä Configura√ß√µes do ambiente de teste:"
echo "  Projeto: $PROJECT_ID"
echo "  Servi√ßo: $SERVICE_NAME"
echo "  Regi√£o: $REGION"
echo "  Imagem: $IMAGE_NAME:$BUILD_ID"
echo ""

# Verificar se gcloud est√° configurado
if ! command -v gcloud &> /dev/null; then
    echo "‚ùå Google Cloud SDK n√£o encontrado. Instale: https://cloud.google.com/sdk/docs/install"
    exit 1
fi

# Verificar se estamos no diret√≥rio correto
if [ ! -f "real_google_sheets_extractor.py" ]; then
    echo "‚ùå Arquivo real_google_sheets_extractor.py n√£o encontrado. Execute este script no diret√≥rio raiz do projeto."
    exit 1
fi

# Verificar se a corre√ß√£o foi aplicada
if ! grep -q "date_normalizer" real_google_sheets_extractor.py; then
    echo "‚ùå Corre√ß√£o de datas n√£o aplicada no real_google_sheets_extractor.py"
    echo "   Execute primeiro: python3 apply_date_fix.py"
    exit 1
fi

echo "‚úÖ Corre√ß√£o de datas detectada no c√≥digo"

# Verificar se o arquivo date_normalizer.py existe
if [ ! -f "date_normalizer.py" ]; then
    echo "‚ùå Arquivo date_normalizer.py n√£o encontrado"
    exit 1
fi

echo "‚úÖ Arquivo date_normalizer.py encontrado"

# Configurar projeto
echo "üîß Configurando projeto..."
gcloud config set project $PROJECT_ID

# Habilitar APIs necess√°rias
echo "üîå Habilitando APIs..."
gcloud services enable cloudbuild.googleapis.com
gcloud services enable run.googleapis.com
gcloud services enable containerregistry.googleapis.com

# Build da imagem com corre√ß√£o
echo "üèóÔ∏è Construindo imagem com corre√ß√£o de datas..."
gcloud builds submit --tag $IMAGE_NAME:$BUILD_ID

echo "üöÄ Fazendo deploy para ambiente de teste..."
gcloud run deploy $SERVICE_NAME \
    --image $IMAGE_NAME:$BUILD_ID \
    --platform managed \
    --region $REGION \
    --allow-unauthenticated \
    --port 8080 \
    --memory 512Mi \
    --cpu 1 \
    --min-instances 0 \
    --max-instances 3 \
    --concurrency 80 \
    --timeout 300s \
    --set-env-vars ENVIRONMENT=test,LOG_LEVEL=info,GUNICORN_WORKERS=1

# Obter URL do servi√ßo de teste
TEST_URL=$(gcloud run services describe $SERVICE_NAME --project=$PROJECT_ID --platform=managed --region=$REGION --format='value(status.url)')

echo ""
echo "‚úÖ DEPLOY EM AMBIENTE DE TESTE CONCLU√çDO!"
echo "=========================================="
echo "üåê URL do ambiente de teste: $TEST_URL"
echo "üìä Imagem: $IMAGE_NAME:$BUILD_ID"
echo ""
echo "üß™ PR√ìXIMOS PASSOS:"
echo "1. Testar endpoints no ambiente de teste"
echo "2. Validar corre√ß√£o de datas"
echo "3. Se tudo estiver OK, fazer deploy em produ√ß√£o"
echo ""
echo "üìã COMANDOS PARA TESTE:"
echo "curl \"$TEST_URL/health\""
echo "curl \"$TEST_URL/api/copacol_semana_do_pescado_youtube/data\""
echo ""
echo "‚ö†Ô∏è  IMPORTANTE: Este √© um ambiente de TESTE separado da produ√ß√£o"
echo "   A produ√ß√£o continua funcionando normalmente at√© a valida√ß√£o"
