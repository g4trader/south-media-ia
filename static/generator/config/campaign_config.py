#!/usr/bin/env python3
"""
Sistema de configura√ß√£o de campanhas para dashboards de v√≠deo program√°tica
Permite configurar m√∫ltiplas campanhas de forma centralizada
"""

import os
from typing import Dict, List, Optional

class CampaignConfig:
    """Configura√ß√£o de uma campanha de v√≠deo program√°tica"""
    
    def __init__(self, 
                 client: str,
                 campaign: str,
                 sheet_id: str,
                 tabs: Dict[str, str],
                 dashboard_template: str = "video_programmatic_template.html",
                 api_endpoint: str = None):
        """
        Args:
            client: Nome do cliente (ex: "SEBRAE PR")
            campaign: Nome da campanha (ex: "Institucional Setembro")
            sheet_id: ID da planilha Google Sheets
            tabs: Dicion√°rio com nomes das abas e seus GIDs
            dashboard_template: Template HTML a ser usado
            api_endpoint: Endpoint da API (se None, ser√° gerado automaticamente)
        """
        self.client = client
        self.campaign = campaign
        self.sheet_id = sheet_id
        self.tabs = tabs
        self.dashboard_template = dashboard_template
        self.api_endpoint = api_endpoint or f"/api/{self.get_slug()}/data"
        
    def get_slug(self) -> str:
        """Gera slug √∫nico para a campanha"""
        return f"{self.client.lower().replace(' ', '_')}_{self.campaign.lower().replace(' ', '_')}"
    
    def get_dashboard_title(self) -> str:
        """Gera t√≠tulo do dashboard"""
        return f"Dashboard {self.client} - {self.campaign}"
    
    def get_campaign_name(self) -> str:
        """Gera nome da campanha para exibi√ß√£o"""
        return f"{self.client} {self.campaign.upper()}"

# Configura√ß√µes das campanhas
CAMPAIGNS = {
    "sebrae_pr": CampaignConfig(
        client="SEBRAE PR",
        campaign="Institucional Setembro",
        sheet_id="1IUUSXaN0Drrdt-7B0IUiMRQK2gT-JtzhCFZvV7e5-V8",
        tabs={
            "daily_data": "668487440",      # Aba Report
            "contract": "719245615",        # Aba Informa√ß√µes de Contrato
            "strategies": "511331032",      # Aba Estrat√©gias
            "publishers": "531141406"       # Aba Lista de Publishers
        },
        dashboard_template="video_programmatic_template.html"
    ),
    
    # Exemplo de como adicionar novas campanhas:
    "exemplo_cliente": CampaignConfig(
        client="Cliente Exemplo",
        campaign="Campanha Exemplo",
        sheet_id="SHEET_ID_AQUI",
        tabs={
            "daily_data": "GID_DADOS_DIARIOS",
            "contract": "GID_CONTRATO",
            "strategies": "GID_ESTRATEGIAS",
            "publishers": "GID_PUBLISHERS"
        },
        dashboard_template="video_programmatic_template.html"
    ),
}

def get_campaign_config(campaign_key: str) -> Optional[CampaignConfig]:
    """Obter configura√ß√£o de uma campanha espec√≠fica"""
    return CAMPAIGNS.get(campaign_key)

def get_all_campaigns() -> Dict[str, CampaignConfig]:
    """Obter todas as configura√ß√µes de campanhas"""
    return CAMPAIGNS

def get_campaign_by_endpoint(endpoint: str) -> Optional[CampaignConfig]:
    """Encontrar campanha pelo endpoint da API"""
    for campaign in CAMPAIGNS.values():
        if campaign.api_endpoint == endpoint:
            return campaign
    return None

def validate_campaign_config(config: CampaignConfig) -> List[str]:
    """Validar configura√ß√£o de campanha"""
    errors = []
    
    if not config.client:
        errors.append("Cliente n√£o pode ser vazio")
    
    if not config.campaign:
        errors.append("Campanha n√£o pode ser vazia")
    
    if not config.sheet_id:
        errors.append("Sheet ID n√£o pode ser vazio")
    
    required_tabs = ["daily_data", "contract", "strategies", "publishers"]
    for tab in required_tabs:
        if tab not in config.tabs:
            errors.append(f"Aba '{tab}' √© obrigat√≥ria")
    
    return errors

# Configura√ß√µes padr√£o para extra√ß√£o de dados
DEFAULT_COLUMN_MAPPING = {
    'Day': 'date',
    'Creative': 'creative',
    'Imps': 'impressions',
    'Clicks': 'clicks',
    'CTR %': 'ctr',
    'Video Completion Rate %': 'vtr',
    'Video Skip Rate %': 'skip_rate',
    'Video Start Rate %': 'start_rate',
    '25% Video Complete': 'q25',
    '50% Video Complete': 'q50',
    '75% Video Complete': 'q75',
    '100% Complete': 'q100',
    'Video Starts': 'starts',
    'Valor Investido': 'spend',
    'CPV': 'cpv'
}

# Mapeamento de campos de contrato padr√£o
DEFAULT_CONTRACT_MAPPING = {
    'cliente': 'client',
    'campanha': 'campaign',
    'canal': 'channel',
    'tipo de criativo': 'creative_type',
    'investimento': 'investment',
    'cpv contratado': 'cpv_contracted',
    'complete views contrado': 'complete_views_contracted',
    'periodo de veicula√ß√£o': 'period'
}

if __name__ == "__main__":
    # Teste das configura√ß√µes
    print("üìä Configura√ß√µes de Campanhas:")
    print("=" * 50)
    
    for key, config in CAMPAIGNS.items():
        print(f"\nüéØ {config.client} - {config.campaign}")
        print(f"   Slug: {config.get_slug()}")
        print(f"   API Endpoint: {config.api_endpoint}")
        print(f"   Dashboard: {config.get_dashboard_title()}")
        print(f"   Abas: {len(config.tabs)}")
        
        # Validar configura√ß√£o
        errors = validate_campaign_config(config)
        if errors:
            print(f"   ‚ùå Erros: {', '.join(errors)}")
        else:
            print(f"   ‚úÖ Configura√ß√£o v√°lida")
