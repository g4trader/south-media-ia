#!/usr/bin/env python3
"""
Teste Final do Sistema de Autentica√ß√£o Robusto
"""

import time
import logging
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

# Configurar logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def test_auth_final():
    """Teste final do sistema de autentica√ß√£o"""
    chrome_options = Options()
    chrome_options.add_argument('--headless')
    chrome_options.add_argument('--no-sandbox')
    chrome_options.add_argument('--disable-dev-shm-usage')
    chrome_options.add_argument('--disable-gpu')
    chrome_options.add_argument('--window-size=1920,1080')
    
    driver = webdriver.Chrome(options=chrome_options)
    
    try:
        logger.info("üîê Teste Final do Sistema de Autentica√ß√£o Robusto")
        
        # Teste 1: Login com admin
        logger.info("üëë Teste 1: Login com admin")
        success = test_login(driver, "admin", "dashboard2025", "Administrador do Sistema", "SUPER")
        if not success:
            return False
        
        # Teste 2: Verificar sistema funcionando
        logger.info("‚úÖ Teste 2: Verificar sistema funcionando")
        
        # Verificar se authSystem est√° dispon√≠vel
        auth_system_available = driver.execute_script("return typeof window.authSystem !== 'undefined';")
        auth_system_authenticated = driver.execute_script("return window.authSystem ? window.authSystem.isAuthenticated() : false;")
        
        logger.info(f"‚úÖ authSystem dispon√≠vel: {auth_system_available}")
        logger.info(f"‚úÖ authSystem autenticado: {auth_system_authenticated}")
        
        if not (auth_system_available and auth_system_authenticated):
            logger.error("‚ùå Sistema de autentica√ß√£o n√£o est√° funcionando corretamente")
            return False
        
        # Verificar dados do usu√°rio
        current_user = driver.execute_script("return window.authSystem.getCurrentUser();")
        logger.info(f"‚úÖ Usu√°rio atual: {current_user['profile']['full_name']}")
        logger.info(f"‚úÖ Role: {current_user['role']}")
        logger.info(f"‚úÖ Permiss√µes: {current_user['permissions']}")
        
        # Verificar se tem todas as permiss√µes (super admin)
        if '*' not in current_user['permissions']:
            logger.error("‚ùå Admin n√£o tem todas as permiss√µes")
            return False
        
        logger.info("üéâ SISTEMA DE AUTENTICA√á√ÉO ROBUSTO FUNCIONANDO PERFEITAMENTE!")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erro durante os testes: {e}")
        return False
    finally:
        driver.quit()

def test_login(driver, username, password, expected_name, expected_role):
    """Testar login com credenciais espec√≠ficas"""
    try:
        # Ir para p√°gina de login
        driver.get("https://dash.iasouth.tech/login.html")
        
        # Aguardar carregamento
        WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.ID, "loginForm"))
        )
        
        # Preencher credenciais
        username_field = driver.find_element(By.ID, "username")
        password_field = driver.find_element(By.ID, "password")
        login_button = driver.find_element(By.ID, "loginButton")
        
        username_field.send_keys(username)
        password_field.send_keys(password)
        login_button.click()
        
        # Aguardar redirecionamento
        WebDriverWait(driver, 10).until(
            lambda d: "dashboard-protected" in d.current_url
        )
        
        # Verificar informa√ß√µes do usu√°rio
        user_name = driver.find_element(By.ID, "userName")
        user_role = driver.find_element(By.ID, "userRole")
        
        if expected_name not in user_name.text:
            logger.error(f"‚ùå Nome esperado '{expected_name}' n√£o encontrado em '{user_name.text}'")
            return False
        
        if expected_role not in user_role.text:
            logger.error(f"‚ùå Role esperado '{expected_role}' n√£o encontrado em '{user_role.text}'")
            return False
        
        logger.info(f"‚úÖ Login bem-sucedido: {user_name.text} ({user_role.text})")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erro no login: {e}")
        return False

if __name__ == "__main__":
    success = test_auth_final()
    if success:
        print("\nüéâ SISTEMA DE AUTENTICA√á√ÉO ROBUSTO FUNCIONANDO PERFEITAMENTE!")
        print("‚úÖ Todos os testes passaram com sucesso")
        print("\nüîê Funcionalidades implementadas:")
        print("   ‚Ä¢ Sistema de usu√°rios e roles")
        print("   ‚Ä¢ Controle de acesso baseado em permiss√µes")
        print("   ‚Ä¢ Gerenciamento de sess√µes seguro")
        print("   ‚Ä¢ Middleware de prote√ß√£o de rotas")
        print("   ‚Ä¢ Interface de gerenciamento de usu√°rios")
        print("\nüë• Usu√°rios dispon√≠veis:")
        print("   ‚Ä¢ admin / dashboard2025 (Super Admin)")
        print("   ‚Ä¢ manager / manager2025 (Gerente)")
        print("   ‚Ä¢ viewer / viewer2025 (Visualizador)")
    else:
        print("\n‚ùå ALGUNS TESTES FALHARAM")
        print("üîç Verifique os logs para mais detalhes")
    
    exit(0 if success else 1)
