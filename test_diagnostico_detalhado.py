#!/usr/bin/env python3
"""
Teste de Diagn√≥stico Detalhado
Investiga problemas espec√≠ficos identificados na verifica√ß√£o cr√≠tica
"""

import time
import logging
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.alert import Alert
from selenium.common.exceptions import TimeoutException, NoSuchElementException

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('diagnostico_detalhado.log'),
        logging.StreamHandler()
    ]
)

class DiagnosticoDetalhado:
    def __init__(self):
        self.driver = None
        self.wait = None
        
    def setup_driver(self, headless=True):
        """Configurar o driver do Selenium"""
        try:
            chrome_options = Options()
            if headless:
                chrome_options.add_argument('--headless')
            chrome_options.add_argument('--no-sandbox')
            chrome_options.add_argument('--disable-dev-shm-usage')
            chrome_options.add_argument('--window-size=1920,1080')
            chrome_options.add_argument('--disable-web-security')
            chrome_options.add_argument('--disable-features=VizDisplayCompositor')
            
            self.driver = webdriver.Chrome(options=chrome_options)
            self.wait = WebDriverWait(self.driver, 20)
            
            logging.info("‚úÖ Driver do Selenium configurado com sucesso")
            return True
        except Exception as e:
            logging.error(f"‚ùå Erro ao configurar driver: {e}")
            return False
    
    def diagnosticar_homepage(self):
        """Diagnosticar problemas na homepage"""
        logging.info("üîç DIAGN√ìSTICO: Homepage")
        
        try:
            self.driver.get("https://dash.iasouth.tech")
            time.sleep(5)
            
            # Verificar t√≠tulo
            title = self.driver.title
            logging.info(f"üìÑ T√≠tulo da p√°gina: {title}")
            
            # Verificar se h√° erros JavaScript
            logs = self.driver.get_log('browser')
            js_errors = [log for log in logs if log['level'] == 'SEVERE']
            if js_errors:
                logging.error(f"üö® Erros JavaScript encontrados: {len(js_errors)}")
                for error in js_errors:
                    logging.error(f"   - {error['message']}")
            
            # Verificar dashboards
            dashboard_cards = self.driver.find_elements(By.CLASS_NAME, "dashboard-card")
            logging.info(f"üìä Dashboards encontrados: {len(dashboard_cards)}")
            
            if len(dashboard_cards) > 0:
                # Testar clicabilidade do primeiro dashboard
                first_card = dashboard_cards[0]
                logging.info(f"üéØ Testando clicabilidade do dashboard: {first_card.text[:50]}...")
                
                try:
                    # Verificar se o card √© clic√°vel
                    if first_card.is_enabled() and first_card.is_displayed():
                        logging.info("‚úÖ Dashboard est√° habilitado e vis√≠vel")
                        
                        # Tentar clicar
                        original_url = self.driver.current_url
                        first_card.click()
                        time.sleep(3)
                        
                        new_url = self.driver.current_url
                        if new_url != original_url:
                            logging.info(f"‚úÖ Dashboard clic√°vel - redirecionou para: {new_url}")
                        else:
                            logging.warning("‚ö†Ô∏è Dashboard clicado mas n√£o redirecionou")
                    else:
                        logging.error("‚ùå Dashboard n√£o est√° habilitado ou vis√≠vel")
                        
                except Exception as e:
                    logging.error(f"‚ùå Erro ao clicar no dashboard: {e}")
            
            return True
            
        except Exception as e:
            logging.error(f"‚ùå Erro no diagn√≥stico da homepage: {e}")
            return False
    
    def diagnosticar_login(self):
        """Diagnosticar problemas no login"""
        logging.info("üîç DIAGN√ìSTICO: Sistema de Login")
        
        try:
            self.driver.get("https://dash.iasouth.tech/login.html")
            time.sleep(5)
            
            # Verificar se a p√°gina carregou
            title = self.driver.title
            logging.info(f"üìÑ T√≠tulo da p√°gina de login: {title}")
            
            # Verificar erros JavaScript
            logs = self.driver.get_log('browser')
            js_errors = [log for log in logs if log['level'] == 'SEVERE']
            if js_errors:
                logging.error(f"üö® Erros JavaScript na p√°gina de login: {len(js_errors)}")
                for error in js_errors:
                    logging.error(f"   - {error['message']}")
            
            # Verificar elementos do formul√°rio
            try:
                username_field = self.driver.find_element(By.ID, "username")
                logging.info("‚úÖ Campo username encontrado")
            except NoSuchElementException:
                logging.error("‚ùå Campo username N√ÉO encontrado")
                return False
            
            try:
                password_field = self.driver.find_element(By.ID, "password")
                logging.info("‚úÖ Campo password encontrado")
            except NoSuchElementException:
                logging.error("‚ùå Campo password N√ÉO encontrado")
                return False
            
            try:
                login_button = self.driver.find_element(By.ID, "loginButton")
                logging.info("‚úÖ Bot√£o de login encontrado")
            except NoSuchElementException:
                logging.error("‚ùå Bot√£o de login N√ÉO encontrado")
                return False
            
            # Verificar se o sistema de autentica√ß√£o est√° carregado
            auth_system_loaded = self.driver.execute_script("return typeof window.authSystem !== 'undefined';")
            logging.info(f"üîê Sistema de autentica√ß√£o carregado: {auth_system_loaded}")
            
            if auth_system_loaded:
                is_initialized = self.driver.execute_script("return window.authSystem.isInitialized;")
                logging.info(f"üîÑ Sistema inicializado: {is_initialized}")
            
            return True
            
        except Exception as e:
            logging.error(f"‚ùå Erro no diagn√≥stico do login: {e}")
            return False
    
    def diagnosticar_paginas_protegidas(self):
        """Diagnosticar problemas nas p√°ginas protegidas"""
        logging.info("üîç DIAGN√ìSTICO: P√°ginas Protegidas")
        
        try:
            # Limpar sess√£o
            self.driver.delete_all_cookies()
            self.driver.execute_script("localStorage.clear();")
            self.driver.execute_script("sessionStorage.clear();")
            
            # Testar acesso sem login
            protected_pages = [
                "https://dash.iasouth.tech/dashboard-protected.html",
                "https://dash.iasouth.tech/users.html",
                "https://dash.iasouth.tech/companies.html"
            ]
            
            for page in protected_pages:
                logging.info(f"üîí Testando acesso a: {page}")
                self.driver.get(page)
                time.sleep(3)
                
                current_url = self.driver.current_url
                logging.info(f"üìç URL atual: {current_url}")
                
                # Verificar se h√° alertas
                try:
                    alert = Alert(self.driver)
                    alert_text = alert.text
                    logging.info(f"üö® Alerta encontrado: {alert_text}")
                    alert.accept()
                except:
                    logging.info("‚úÖ Nenhum alerta encontrado")
                
                # Verificar se redirecionou para login
                if "login.html" in current_url:
                    logging.info("‚úÖ Redirecionamento de seguran√ßa funcionando")
                else:
                    logging.warning(f"‚ö†Ô∏è P√°gina {page} acess√≠vel sem login")
            
            return True
            
        except Exception as e:
            logging.error(f"‚ùå Erro no diagn√≥stico das p√°ginas protegidas: {e}")
            return False
    
    def diagnosticar_carregamento_completo(self):
        """Diagnosticar problemas de carregamento completo"""
        logging.info("üîç DIAGN√ìSTICO: Carregamento Completo")
        
        try:
            # Testar carregamento com timeout maior
            self.driver.set_page_load_timeout(30)
            
            pages_to_test = [
                "https://dash.iasouth.tech",
                "https://dash.iasouth.tech/login.html",
                "https://dash.iasouth.tech/dashboard-protected.html"
            ]
            
            for page in pages_to_test:
                logging.info(f"‚è±Ô∏è Testando carregamento de: {page}")
                
                start_time = time.time()
                self.driver.get(page)
                load_time = time.time() - start_time
                
                logging.info(f"‚è±Ô∏è Tempo de carregamento: {load_time:.2f}s")
                
                # Verificar se a p√°gina carregou completamente
                ready_state = self.driver.execute_script("return document.readyState;")
                logging.info(f"üìÑ Estado da p√°gina: {ready_state}")
                
                # Verificar erros JavaScript
                logs = self.driver.get_log('browser')
                js_errors = [log for log in logs if log['level'] == 'SEVERE']
                if js_errors:
                    logging.error(f"üö® Erros JavaScript: {len(js_errors)}")
                    for error in js_errors[:3]:  # Mostrar apenas os primeiros 3
                        logging.error(f"   - {error['message']}")
                
                time.sleep(2)
            
            return True
            
        except Exception as e:
            logging.error(f"‚ùå Erro no diagn√≥stico de carregamento: {e}")
            return False
    
    def executar_diagnostico_completo(self):
        """Executar diagn√≥stico completo"""
        if not self.setup_driver(headless=False):  # Usar modo n√£o-headless para melhor diagn√≥stico
            return False
        
        try:
            logging.info("üöÄ INICIANDO DIAGN√ìSTICO DETALHADO...")
            
            # Executar todos os diagn√≥sticos
            self.diagnosticar_homepage()
            self.diagnosticar_login()
            self.diagnosticar_paginas_protegidas()
            self.diagnosticar_carregamento_completo()
            
            logging.info("‚úÖ Diagn√≥stico completo finalizado")
            return True
            
        except Exception as e:
            logging.error(f"‚ùå Erro durante diagn√≥stico: {e}")
            return False
        
        finally:
            if self.driver:
                self.driver.quit()
                logging.info("üßπ Driver encerrado")

def main():
    """Fun√ß√£o principal"""
    diagnostico = DiagnosticoDetalhado()
    success = diagnostico.executar_diagnostico_completo()
    
    if success:
        logging.info("üéâ Diagn√≥stico detalhado conclu√≠do!")
    else:
        logging.error("‚ùå Diagn√≥stico detalhado falhou!")

if __name__ == "__main__":
    main()
