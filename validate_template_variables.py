#!/usr/bin/env python3
"""
Script para validar vari√°veis do template gen√©rico
Identifica todas as vari√°veis que precisam ser substitu√≠das
"""

import re
import json
from typing import List, Dict, Set

def extract_template_variables(template_content: str) -> Dict[str, List[str]]:
    """
    Extrai todas as vari√°veis do template usando diferentes padr√µes
    """
    variables = {
        'double_braces': [],      # {{VARIAVEL}}
        'single_braces': [],      # {VARIAVEL}
        'html_placeholders': [],  # <!-- VARIAVEL -->
        'js_placeholders': [],    # 'PLACEHOLDER'
        'url_placeholders': []    # URL_PLACEHOLDER
    }
    
    # Padr√£o 1: {{VARIAVEL}}
    double_braces = re.findall(r'\{\{([^}]+)\}\}', template_content)
    variables['double_braces'] = double_braces
    
    # Padr√£o 2: {VARIAVEL} (sem duplo)
    single_braces = re.findall(r'(?<!\{)\{([^}]+)\}(?!\})', template_content)
    variables['single_braces'] = single_braces
    
    # Padr√£o 3: <!-- VARIAVEL -->
    html_placeholders = re.findall(r'<!--\s*([^-\s][^->]*?)\s*-->', template_content)
    variables['html_placeholders'] = html_placeholders
    
    # Padr√£o 4: 'PLACEHOLDER' ou "PLACEHOLDER"
    js_placeholders = re.findall(r'[\'"]([A-Z_][A-Z0-9_]*)[\'"]', template_content)
    variables['js_placeholders'] = js_placeholders
    
    # Padr√£o 5: URLs e endpoints
    url_placeholders = re.findall(r'[A-Z_]+_URL|[A-Z_]+_ENDPOINT', template_content)
    variables['url_placeholders'] = url_placeholders
    
    return variables

def analyze_template_structure(template_content: str) -> Dict[str, any]:
    """
    Analisa a estrutura do template para identificar se√ß√µes
    """
    analysis = {
        'has_loading_screen': 'loadingScreen' in template_content,
        'has_api_calls': 'fetch(' in template_content or 'apiEndpoint' in template_content,
        'has_charts': 'Chart(' in template_content or 'chart.js' in template_content,
        'has_tables': '<table' in template_content,
        'has_tabs': 'data-tab=' in template_content,
        'has_responsive_design': '@media' in template_content,
        'has_south_media_branding': 'South Media' in template_content,
        'has_custom_styling': ':root' in template_content,
        'sections': []
    }
    
    # Identificar se√ß√µes principais
    sections = re.findall(r'<!--\s*([^-\s][^->]*?)\s*-->', template_content)
    analysis['sections'] = sections
    
    return analysis

def create_variable_mapping() -> Dict[str, str]:
    """
    Cria mapeamento de vari√°veis para valores de exemplo
    """
    return {
        # Informa√ß√µes b√°sicas
        'CLIENT_NAME': 'Nome do Cliente',
        'CAMPAIGN_NAME': 'Nome da Campanha',
        'CAMPAIGN_STATUS': 'ATIVA',
        'CAMPAIGN_PERIOD': '01/01/2024 a 31/01/2024',
        'CAMPAIGN_DESCRIPTION': 'Performance do Canal - Complete View',
        'CAMPAIGN_OBJECTIVES': 'Objetivos da campanha...',
        
        # Dados financeiros
        'TOTAL_BUDGET': '50.000,00',
        'BUDGET_USED': '25.000,00',
        'PACING_PERCENTAGE': '50',
        'TARGET_VC': '500.000',
        'CPV_CONTRACTED': '0,10',
        'CPV_CURRENT': '0,12',
        
        # Canais e formatos
        'PRIMARY_CHANNEL': 'YOUTUBE',
        'CHANNEL_BADGES': '<span style="background:rgba(255,107,53,0.2); padding:6px 12px; border-radius:20px; font-size:0.9rem">YOUTUBE</span>',
        
        # Estrat√©gias
        'SEGMENTATION_STRATEGY': '''<li><strong>üéØ Segmenta√ß√£o:</strong> Estrat√©gia focada em canais espec√≠ficos</li>
            <li><strong>üö´ Exclus√µes:</strong> Canais negativados</li>''',
        
        'CREATIVE_STRATEGY': '''<li><strong>üì± Criativos:</strong> Testar varia√ß√µes focando nos primeiros segundos</li>
            <li><strong>üé¨ Formato:</strong> V√≠deo de 30s para m√°xima reten√ß√£o</li>''',
        
        'FORMAT_SPECIFICATIONS': '''<li>Complete View (30s) para m√°xima aten√ß√£o</li>
            <li>V√≠deo institucional 30s</li>''',
        
        # URLs e endpoints
        'API_ENDPOINT': 'https://south-media-ia-609095880025.us-central1.run.app/api/CAMPAIGN_KEY/data',
        'CAMPAIGN_KEY': 'campaign_key_placeholder',
        
        # HTML original (placeholder)
        'ORIGINAL_HTML': '<!-- HTML original ser√° inserido aqui -->'
    }

def validate_template_completeness(template_content: str, variables: Dict[str, List[str]]) -> Dict[str, any]:
    """
    Valida se o template est√° completo e funcional
    """
    validation = {
        'is_complete': True,
        'missing_elements': [],
        'warnings': [],
        'recommendations': []
    }
    
    # Verificar elementos essenciais
    essential_elements = [
        'CLIENT_NAME', 'CAMPAIGN_NAME', 'CAMPAIGN_STATUS',
        'API_ENDPOINT', 'CAMPAIGN_KEY'
    ]
    
    all_variables = []
    for var_list in variables.values():
        all_variables.extend(var_list)
    
    for element in essential_elements:
        if element not in all_variables:
            validation['missing_elements'].append(element)
            validation['is_complete'] = False
    
    # Verificar estrutura HTML
    if not re.search(r'<html[^>]*>', template_content):
        validation['warnings'].append('Estrutura HTML b√°sica n√£o encontrada')
    
    if not re.search(r'<head[^>]*>', template_content):
        validation['warnings'].append('Se√ß√£o HEAD n√£o encontrada')
    
    if not re.search(r'<body[^>]*>', template_content):
        validation['warnings'].append('Se√ß√£o BODY n√£o encontrada')
    
    # Verificar JavaScript
    if 'DashboardLoader' not in template_content:
        validation['warnings'].append('Classe DashboardLoader n√£o encontrada')
    
    if 'fetch(' not in template_content:
        validation['warnings'].append('Fun√ß√£o fetch() n√£o encontrada para carregar dados')
    
    # Recomenda√ß√µes
    if 'loadingScreen' not in template_content:
        validation['recommendations'].append('Adicionar tela de loading para melhor UX')
    
    if 'error' not in template_content.lower():
        validation['recommendations'].append('Adicionar tratamento de erros')
    
    return validation

def generate_replacement_script(variables: Dict[str, List[str]], mapping: Dict[str, str]) -> str:
    """
    Gera script Python para fazer as substitui√ß√µes no template
    """
    script = '''#!/usr/bin/env python3
"""
Script gerado automaticamente para substituir vari√°veis no template
"""

def replace_template_variables(template_content: str, campaign_data: dict) -> str:
    """
    Substitui todas as vari√°veis do template com dados reais
    """
    replacements = {
'''
    
    # Adicionar todas as vari√°veis encontradas
    all_variables = set()
    for var_list in variables.values():
        all_variables.update(var_list)
    
    for var in sorted(all_variables):
        if var in mapping:
            script += f'        "{var}": campaign_data.get("{var.lower()}", "{mapping[var]}"),\n'
        else:
            script += f'        "{var}": campaign_data.get("{var.lower()}", "VALOR_NAO_DEFINIDO"),\n'
    
    script += '''    }
    
    # Fazer substitui√ß√µes
    result = template_content
    for placeholder, value in replacements.items():
        result = result.replace(f"{{{{{placeholder}}}}}", str(value))
    
    return result

# Exemplo de uso:
if __name__ == "__main__":
    # Carregar template
    with open('static/dash_generic_template.html', 'r', encoding='utf-8') as f:
        template = f.read()
    
    # Dados de exemplo
    campaign_data = {
        "client_name": "SEBRAE PR",
        "campaign_name": "Institucional Setembro",
        "campaign_status": "ATIVA",
        "campaign_period": "01/09/2024 a 30/09/2024",
        "campaign_description": "Performance do YouTube - Complete View",
        "campaign_objectives": "Fortalecer a marca e comunicar valores institucionais",
        "total_budget": "30.000,00",
        "budget_used": "15.000,00",
        "pacing_percentage": "50",
        "target_vc": "300.000",
        "cpv_contracted": "0,10",
        "cpv_current": "0,12",
        "primary_channel": "YOUTUBE",
        "api_endpoint": "https://south-media-ia-609095880025.us-central1.run.app/api/sebrae_pr_institucional_setembro/data",
        "campaign_key": "sebrae_pr_institucional_setembro"
    }
    
    # Substituir vari√°veis
    result = replace_template_variables(template, campaign_data)
    
    # Salvar resultado
    with open('static/dash_test_output.html', 'w', encoding='utf-8') as f:
        f.write(result)
    
    print("‚úÖ Template processado e salvo em static/dash_test_output.html")
'''
    
    return script

def main():
    """
    Fun√ß√£o principal para validar o template
    """
    print("üîç Validando template gen√©rico...")
    
    # Carregar template
    try:
        with open('static/dash_generic_template.html', 'r', encoding='utf-8') as f:
            template_content = f.read()
        print("‚úÖ Template carregado com sucesso")
    except FileNotFoundError:
        print("‚ùå Arquivo template n√£o encontrado: static/dash_generic_template.html")
        return
    except Exception as e:
        print(f"‚ùå Erro ao carregar template: {e}")
        return
    
    # Extrair vari√°veis
    print("\nüìä Extraindo vari√°veis...")
    variables = extract_template_variables(template_content)
    
    # Mostrar vari√°veis encontradas
    total_variables = 0
    for pattern, var_list in variables.items():
        if var_list:
            print(f"  {pattern}: {len(var_list)} vari√°veis")
            for var in var_list[:5]:  # Mostrar apenas as primeiras 5
                print(f"    - {var}")
            if len(var_list) > 5:
                print(f"    ... e mais {len(var_list) - 5}")
            total_variables += len(var_list)
    
    print(f"\nüìà Total de vari√°veis encontradas: {total_variables}")
    
    # Analisar estrutura
    print("\nüèóÔ∏è Analisando estrutura...")
    structure = analyze_template_structure(template_content)
    for key, value in structure.items():
        if isinstance(value, bool):
            status = "‚úÖ" if value else "‚ùå"
            print(f"  {status} {key.replace('_', ' ').title()}")
        elif isinstance(value, list) and value:
            print(f"  üìã {key.replace('_', ' ').title()}: {', '.join(value)}")
    
    # Validar completude
    print("\n‚úÖ Validando completude...")
    validation = validate_template_completeness(template_content, variables)
    
    if validation['is_complete']:
        print("  ‚úÖ Template est√° completo")
    else:
        print("  ‚ùå Template incompleto")
        for missing in validation['missing_elements']:
            print(f"    - Faltando: {missing}")
    
    if validation['warnings']:
        print("\n‚ö†Ô∏è Avisos:")
        for warning in validation['warnings']:
            print(f"  - {warning}")
    
    if validation['recommendations']:
        print("\nüí° Recomenda√ß√µes:")
        for rec in validation['recommendations']:
            print(f"  - {rec}")
    
    # Criar mapeamento de vari√°veis
    print("\nüó∫Ô∏è Criando mapeamento de vari√°veis...")
    mapping = create_variable_mapping()
    print(f"  üìä {len(mapping)} vari√°veis mapeadas")
    
    # Gerar script de substitui√ß√£o
    print("\nüîß Gerando script de substitui√ß√£o...")
    replacement_script = generate_replacement_script(variables, mapping)
    
    with open('replace_template_variables.py', 'w', encoding='utf-8') as f:
        f.write(replacement_script)
    
    print("  ‚úÖ Script salvo em: replace_template_variables.py")
    
    # Resumo final
    print("\n" + "="*60)
    print("üìã RESUMO DA VALIDA√á√ÉO")
    print("="*60)
    print(f"üìä Total de vari√°veis: {total_variables}")
    print(f"üèóÔ∏è Estrutura HTML: {'‚úÖ' if structure.get('has_loading_screen') else '‚ùå'}")
    print(f"üì± Responsivo: {'‚úÖ' if structure.get('has_responsive_design') else '‚ùå'}")
    print(f"üé® South Media: {'‚úÖ' if structure.get('has_south_media_branding') else '‚ùå'}")
    print(f"üìà Gr√°ficos: {'‚úÖ' if structure.get('has_charts') else '‚ùå'}")
    print(f"üìã Tabelas: {'‚úÖ' if structure.get('has_tables') else '‚ùå'}")
    print(f"üîÑ API Calls: {'‚úÖ' if structure.get('has_api_calls') else '‚ùå'}")
    print(f"‚úÖ Completude: {'‚úÖ' if validation['is_complete'] else '‚ùå'}")
    
    if validation['warnings'] or validation['recommendations']:
        print(f"\n‚ö†Ô∏è {len(validation['warnings'])} avisos, üí° {len(validation['recommendations'])} recomenda√ß√µes")
    
    print("\nüöÄ Pr√≥ximos passos:")
    print("  1. Execute: python3 replace_template_variables.py")
    print("  2. Verifique: static/dash_test_output.html")
    print("  3. Integre no gerador de dashboards")

if __name__ == "__main__":
    main()

