#!/usr/bin/env python3
"""
Teste direto no navegador - sem headless para ver o que est√° acontecendo
"""

import time
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.options import Options

def test_browser_visible():
    """Teste com navegador vis√≠vel para debug"""
    print("üöÄ TESTE DIRETO NO NAVEGADOR")
    print("=" * 50)
    
    # Setup - SEM headless para ver o que est√° acontecendo
    chrome_options = Options()
    chrome_options.add_argument("--no-sandbox")
    chrome_options.add_argument("--disable-dev-shm-usage")
    chrome_options.add_argument("--window-size=1920,1080")
    # chrome_options.add_argument("--headless")  # COMENTADO para ver o navegador
    
    try:
        driver = webdriver.Chrome(options=chrome_options)
        wait = WebDriverWait(driver, 20)
        
        print("üìä Acessando dashboard...")
        driver.get("http://localhost:5000/static/dash_sebrae_programatica_video_sync.html")
        
        print("‚è≥ Aguardando 10 segundos para carregamento...")
        time.sleep(10)
        
        print("üîç Verificando elementos...")
        
        # Verificar se h√° loading screen
        try:
            loading = driver.find_element(By.ID, "loadingScreen")
            print(f"‚è≥ Loading screen vis√≠vel: {loading.is_displayed()}")
        except:
            print("‚ÑπÔ∏è Loading screen n√£o encontrado")
        
        # Verificar H1
        try:
            h1 = driver.find_element(By.TAG_NAME, "h1")
            print(f"üìÑ H1 encontrado: '{h1.text}'")
        except:
            print("‚ùå H1 n√£o encontrado")
        
        # Verificar cards de m√©tricas
        try:
            metrics = driver.find_elements(By.CSS_SELECTOR, ".metric")
            print(f"üí≥ Cards de m√©tricas: {len(metrics)}")
            
            # Verificar se os cards t√™m conte√∫do
            for i, metric in enumerate(metrics[:4]):
                try:
                    label = metric.find_element(By.CSS_SELECTOR, ".label")
                    value = metric.find_element(By.CSS_SELECTOR, ".value")
                    print(f"   {i+1}. {label.text}: {value.text}")
                except:
                    print(f"   {i+1}. Erro ao ler m√©trica")
        except Exception as e:
            print(f"‚ùå Erro ao verificar m√©tricas: {e}")
        
        # Verificar JavaScript
        try:
            loader_available = driver.execute_script("return typeof window.dashboardLoader !== 'undefined'")
            print(f"üîß DashboardLoader dispon√≠vel: {loader_available}")
            
            if loader_available:
                data_available = driver.execute_script("return window.dashboardLoader.data !== null")
                print(f"üìä Dados dispon√≠veis: {data_available}")
        except Exception as e:
            print(f"‚ùå Erro no JavaScript: {e}")
        
        print("\n‚è≥ Aguardando mais 5 segundos...")
        time.sleep(5)
        
        # Screenshot
        driver.save_screenshot("selenium_visible_test.png")
        print("üì∏ Screenshot salvo: selenium_visible_test.png")
        
        print("\n‚úÖ Teste conclu√≠do! Verifique o screenshot.")
        print("üîç O navegador deve estar vis√≠vel para inspe√ß√£o manual.")
        
        # Aguardar input do usu√°rio para fechar
        input("Pressione Enter para fechar o navegador...")
        
    except Exception as e:
        print(f"‚ùå Erro: {e}")
    
    finally:
        if 'driver' in locals():
            driver.quit()
            print("üîß Navegador fechado")

if __name__ == "__main__":
    test_browser_visible()
