#!/usr/bin/env python3
"""
Aplica√ß√£o Cloud Run espec√≠fica para atualiza√ß√£o de Footfall
Endpoint separado para processar apenas dados de footfall
"""

import os
import json
import logging
from flask import Flask, request, jsonify
from datetime import datetime
import threading
import time

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

app = Flask(__name__)

# Vari√°veis globais para controle
footfall_thread = None
last_run_status = {"status": "never_run", "timestamp": None, "error": None}
is_running = False

def run_footfall_update():
    """Executa uma atualiza√ß√£o de footfall"""
    global last_run_status, is_running
    
    is_running = True
    try:
        logger.info("üó∫Ô∏è Iniciando atualiza√ß√£o de footfall...")
        
        # Importar e executar processador de footfall
        from footfall_processor import FootfallProcessor
        
        processor = FootfallProcessor()
        success = processor.run_footfall_update()
        
        last_run_status = {
            "status": "success" if success else "failed",
            "timestamp": datetime.now().isoformat(),
            "error": None if success else "Falha na atualiza√ß√£o de footfall"
        }
        
        logger.info(f"‚úÖ Atualiza√ß√£o de footfall conclu√≠da: {'sucesso' if success else 'falha'}")
        
    except Exception as e:
        logger.error(f"‚ùå Erro na atualiza√ß√£o de footfall: {e}")
        last_run_status = {
            "status": "error",
            "timestamp": datetime.now().isoformat(),
            "error": str(e)
        }
    finally:
        is_running = False

@app.route('/health', methods=['GET'])
def health_check():
    """Health check endpoint"""
    return jsonify({
        "status": "healthy",
        "timestamp": datetime.now().isoformat(),
        "service": "footfall-automation"
    })

@app.route('/status', methods=['GET'])
def get_status():
    """Endpoint para verificar status da automa√ß√£o de footfall"""
    global last_run_status, is_running
    
    return jsonify({
        "footfall_status": last_run_status,
        "is_running": is_running,
        "timestamp": datetime.now().isoformat()
    })

@app.route('/trigger', methods=['POST'])
def trigger_footfall_update():
    """Endpoint para disparar atualiza√ß√£o de footfall"""
    global last_run_status, is_running
    
    if is_running:
        return jsonify({
            "status": "error",
            "message": "Atualiza√ß√£o de footfall j√° est√° em execu√ß√£o"
        }), 409
    
    try:
        # Executar diretamente em vez de usar thread
        is_running = True
        logger.info("üó∫Ô∏è Iniciando atualiza√ß√£o de footfall...")
        
        # Importar e executar processador de footfall
        from footfall_processor import FootfallProcessor
        
        processor = FootfallProcessor()
        success = processor.run_footfall_update()
        
        last_run_status = {
            "status": "success" if success else "failed",
            "timestamp": datetime.now().isoformat(),
            "error": None if success else "Falha na atualiza√ß√£o de footfall"
        }
        
        is_running = False
        logger.info(f"‚úÖ Atualiza√ß√£o de footfall conclu√≠da: {'sucesso' if success else 'falha'}")
        
        return jsonify({
            "status": "completed",
            "message": f"Atualiza√ß√£o de footfall {'bem-sucedida' if success else 'falhou'}",
            "timestamp": datetime.now().isoformat(),
            "success": success
        })
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao disparar atualiza√ß√£o de footfall: {e}")
        last_run_status = {
            "status": "error",
            "timestamp": datetime.now().isoformat(),
            "error": str(e)
        }
        is_running = False
        return jsonify({
            "status": "error",
            "message": str(e)
        }), 500

@app.route('/config', methods=['GET'])
def get_footfall_config():
    """Endpoint para visualizar configura√ß√£o de footfall"""
    try:
        from footfall_config import FOOTFALL_UPDATE_CONFIG, FOOTFALL_VALIDATION
        
        safe_config = {
            "update_interval_hours": FOOTFALL_UPDATE_CONFIG.get("update_interval_hours", 6),
            "validation_rules": {
                "lat_range": FOOTFALL_VALIDATION["lat_range"],
                "lon_range": FOOTFALL_VALIDATION["lon_range"],
                "required_fields": FOOTFALL_VALIDATION["required_fields"]
            },
            "auto_update_enabled": FOOTFALL_UPDATE_CONFIG.get("auto_update_enabled", True)
        }
        
        return jsonify(safe_config)
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao obter configura√ß√£o de footfall: {e}")
        return jsonify({
            "status": "error",
            "message": str(e)
        }), 500

@app.route('/test', methods=['GET'])
def test_footfall_connection():
    """Endpoint para testar conex√£o com dados de footfall"""
    try:
        from footfall_processor import FootfallProcessor
        
        processor = FootfallProcessor()
        footfall_data = processor.get_footfall_data()
        
        if footfall_data:
            return jsonify({
                "status": "success",
                "message": f"Conex√£o OK - {len(footfall_data)} pontos de footfall encontrados",
                "sample_data": footfall_data[:2] if len(footfall_data) > 2 else footfall_data
            })
        else:
            return jsonify({
                "status": "error",
                "message": "Falha ao conectar com dados de footfall"
            }), 500
            
    except Exception as e:
        logger.error(f"‚ùå Erro no teste de conex√£o: {e}")
        return jsonify({
            "status": "error",
            "message": str(e)
        }), 500

@app.route('/', methods=['GET'])
def index():
    """P√°gina inicial com informa√ß√µes da API de Footfall"""
    return jsonify({
        "service": "Footfall Automation API",
        "version": "1.0.0",
        "endpoints": {
            "health": "/health",
            "status": "/status",
            "trigger": "/trigger (POST)",
            "config": "/config",
            "test": "/test"
        },
        "timestamp": datetime.now().isoformat()
    })

def scheduled_footfall_update():
    """Executa atualiza√ß√£o de footfall agendada a cada 6 horas"""
    logger.info("‚è∞ Iniciando automa√ß√£o agendada de footfall...")
    
    while True:
        try:
            # Executar atualiza√ß√£o
            run_footfall_update()
            
            # Aguardar 6 horas (21600 segundos)
            time.sleep(21600)
            
        except Exception as e:
            logger.error(f"‚ùå Erro na automa√ß√£o agendada de footfall: {e}")
            # Aguardar 30 minutos antes de tentar novamente
            time.sleep(1800)

def start_scheduled_footfall():
    """Inicia thread de automa√ß√£o agendada de footfall"""
    try:
        scheduler_thread = threading.Thread(target=scheduled_footfall_update)
        scheduler_thread.daemon = True
        scheduler_thread.start()
        logger.info("‚úÖ Automa√ß√£o agendada de footfall iniciada (a cada 6 horas)")
    except Exception as e:
        logger.error(f"‚ùå Erro ao iniciar automa√ß√£o agendada de footfall: {e}")

def main():
    """Fun√ß√£o principal"""
    logger.info("üó∫Ô∏è Iniciando aplica√ß√£o Cloud Run para Footfall...")
    
    # Verificar se deve iniciar automa√ß√£o agendada
    if os.environ.get('FOOTFALL_AUTOMATION_MODE') != 'scheduler':
        start_scheduled_footfall()
    
    # Iniciar Flask app
    port = int(os.environ.get('PORT', 8080))
    app.run(host='0.0.0.0', port=port, debug=False)

if __name__ == "__main__":
    main()
